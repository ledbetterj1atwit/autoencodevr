encoder = keras.Sequential(
    [
        layers.InputLayer(input_shape=input_shape),
        layers.Conv2D(16, (7, 7), activation='relu', padding='same'),
        layers.MaxPooling2D((2, 2), padding='same'),
        layers.Conv2D(8, (5, 5), activation='relu', padding='same'),
        layers.MaxPooling2D((2, 2), padding='same'),
        layers.Conv2D(8, (3, 3), activation='relu', padding='same'),
        layers.MaxPooling2D((2, 2), padding='same')
    ]
)

decoder = keras.Sequential(
    [
        layers.Conv2DTranspose(8, (3, 3), activation='relu', padding='same'),  # Undo Convolution.
        layers.UpSampling2D((2, 2)),  # Upscale by same factor as pooling.
        layers.Conv2DTranspose(8, (5, 5), activation='relu', padding='same'),
        layers.UpSampling2D((2, 2)),
        layers.Conv2DTranspose(16, (7, 7), activation='relu', padding='same'),
        layers.UpSampling2D((2, 2)),
        layers.Conv2DTranspose(3, (5, 5), activation='sigmoid', padding='same'),
        layers.Cropping2D((2, 0))
    ]
)

autoencoder = keras.Sequential(encoder.layers + decoder.layers)
autoencoder.compile(optimizer='adam',
                    loss=keras.losses.MSE)